//BINARY TREES
//INPUT= 1 2 4 -1 -1 5 7 -1 -1 -1 3 -1 6 -1 -1
#include <iostream>
#include <queue>
using namespace std;

class node{
    public:
    int data;
    node * left;
    node *right;

    node(int d){
        data =d;
        left=NULL;
        right=NULL;
    }    
};



//BUILD TREE
node * buildTree(){
    int d;
    cin>>d;

    if(d==-1){
        return NULL;
    }

    node *n= new node(d);
    n->left= buildTree();
    n->right= buildTree();

    return n;
}

//LEVEL ORDER BUILD
node * levelorder(){
    int d;
    cin>>d;

    node* root= new node(d);

    queue<node*>q;
    q.push(root);
    
    while(!q.empty()){
        node *current= q.front();
        q.pop();

        int c1, c2; //childs

        cin>>c1>>c2;
        if(c1!=-1){
            current->left= new node(c1);
            q.push(current->left);
        }

        if(c2!=-1){
            current->right = new node(c2);
            q.push(current->right);
        }
    }
    return root;    
}


//LEVEL ORDER PRINT- BFS
void levelorderprint(node *root){
    queue<node*> q;

    q.push(root);
    q.push(NULL); //to print in different lines

    while(!q.empty()){
        node *temp=q.front();

        if(temp==NULL){
            cout<<endl;
            q.pop();
            
            if(!q.empty()){
                q.push(NULL);
            }
        }

        else{
            q.pop();
            cout<<temp->data<<" ";
            if(temp->left){
                q.push(temp->left);
            }

            if(temp->right){
                q.push(temp->right);
            }
        }
    }
}


//HEIGHT OF A BINARY TREE
int height(node* root){
    if(root==NULL){
        return 0;
    }

    int h1= height(root->left);
    int h2= height(root->right);
    return 1+max(h1,h2);    
}


//DIAMETER OF THE TREE- Largest distance between any two nodes of the tree
int finddiameter(node* root){
    //Diameter may or may not pass through root
    //D1- LEFT SIDE DIAMETER
    //D2- RIGHT SIDE
    //D3- SUM OF BOTH sides height ; PASSING THROUGH ROOT

    if(root==NULL){
        return 0;
    }

    //recursive case
    int D1= height(root->left) + height(root->right);
    int D2= finddiameter(root->left);
    int D3= finddiameter(root->right);

    return max(D1, max(D2, D3));
}

//FIND DIAMETER - OPTIMISED

class HDpair{
    public:
    int height;
    int diameter;
};

HDpair optimiseddiameter(node *root){

    HDpair p;
    if(root==NULL){
        p.height=p.diameter=0;
        return p;
    }    

    //otherwise
    HDpair left= optimiseddiameter(root->left);
    HDpair right = optimiseddiameter(root->right);

    p.height= max(left.height, right.height)+1;

    int D1= left.height+ right.height;
    int D2= left.diameter;
    int D3= right.diameter;

    p.diameter= max(D1, max(D2, D3));
    return p;
}


//REPLACE ALL NODES WITH SUM OF DECENDENTS
int replacewithsum(node* root){
    //basecase
    if(root==NULL){
        return 0;
    }

    if(root->left==NULL && root->right==NULL){
        return root->data;
    }

    int temp= root->data;
    int LS= replacewithsum(root->left);
    int RS= replacewithsum(root->right);
    root->data=LS+RS;
    return root->data+temp; 
}



int main() {
	// your code goes here
    //node *root= buildTree();

    //cout<<"Level order print"<<endl;
    //levelorder(root);

    node *levelorderbuildroot= levelorder();
    levelorderprint(levelorderbuildroot);

    cout<<"DIAMETER:"<<finddiameter(levelorderbuildroot)<<endl;
    cout<<"Optimised Diameter"<< optimiseddiameter(levelorderbuildroot).diameter<<endl;

    replacewithsum(levelorderbuildroot);
    levelorderprint(levelorderbuildroot);

	return 0;
}

