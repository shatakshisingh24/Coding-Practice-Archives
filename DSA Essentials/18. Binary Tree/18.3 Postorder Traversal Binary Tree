//POST ORDER TRAVERSAL 
//INPUT- 1 2 4 -1 -1 5 7 -1 -1 -1 3 -1 6 -1 -1
//OUTPUT 4,7,5,2,6,3,1
#include <iostream>
using namespace std;

class Node{

public:
    int data;
    Node *left;
    Node *right;

    Node(int d){
        data=d;
        left=right=NULL;
    }
};

//We can define a tree class or use a functional approach
//here we will use functional approach

//BUILDING OF TREE
Node * buildtree(){
    int d;
    cin>>d;

    if(d==-1){
        return NULL;
    }

    Node* n= new Node(d);
    n->left= buildtree();
    n->right= buildtree();
    return n;
}

void postorder(Node *root){
    if(root==NULL){
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}

int main() {
	// your code goes here
    Node * root= buildtree();
    postorder(root);
	return 0;
}
