#include<vector>
#include<list>
#include <iostream>
#include<queue>
using namespace std;

class Graph{
	int V; //number of vertex
	list<int>*l;

	public:

	Graph(int v){
		V=v;
		l= new list<int>[V];
	}

	void add_edge(int i, int j, bool undir= true){

		l[i].push_back(j);
		if(undir){
			l[j].push_back(i);
		}
	}

	void bfs(int source){
		queue<int>q;
		bool *visited = new bool[V]{0};

		q.push(source);
		visited[source]= true;

		while(!q.empty()){
			int f= q.front();
			cout<<f<<" ";
			q.pop();

			//push nbr of this node in q if they are not visited

			for(auto nbr: l[f]){
				if(!visited[nbr]);
				q.push(nbr);
				visited[nbr]= true;
			}

		}
	}

};

int main() {
	// your code goes here

	Graph g(7);

	g.add_edge(0, 1);
	g.add_edge(1,2);
	g.add_edge(3,5);
	g.add_edge(5,6);
	g.add_edge(4,5);
	g.add_edge(0,4);
	g.add_edge(3,4);

	g.bfs(1);
	return 0;
}

